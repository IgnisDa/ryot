//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.1

use std::sync::Arc;

use application_utils::GraphqlRepresentation;
use async_graphql::{Result, SimpleObject};
use async_trait::async_trait;
use file_storage_service::FileStorageService;
use fitness_models::{WorkoutInformation, WorkoutSummary};
use schematic::Schematic;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

/// A workout that was completed by the user.
#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, SimpleObject, Schematic,
)]
#[sea_orm(table_name = "workout")]
#[graphql(name = "Workout")]
#[schematic(rename = "Workout", rename_all = "snake_case")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    #[serde(skip)]
    pub repeated_from: Option<String>,
    pub start_time: DateTimeUtc,
    pub end_time: DateTimeUtc,
    pub duration: i32,
    #[graphql(skip)]
    #[serde(skip)]
    pub user_id: String,
    pub summary: WorkoutSummary,
    pub information: WorkoutInformation,
    pub name: String,
    pub template_id: Option<String>,
}

#[async_trait]
impl GraphqlRepresentation for Model {
    async fn graphql_representation(
        self,
        file_storage_service: &Arc<FileStorageService>,
    ) -> Result<Self> {
        let mut cnv_workout = self.clone();
        if let Some(ref mut assets) = cnv_workout.information.assets {
            for image in assets.images.iter_mut() {
                *image = file_storage_service.get_presigned_url(image.clone()).await;
            }
            for video in assets.videos.iter_mut() {
                *video = file_storage_service.get_presigned_url(video.clone()).await;
            }
        }
        for exercise in cnv_workout.information.exercises.iter_mut() {
            if let Some(ref mut assets) = exercise.assets {
                for image in assets.images.iter_mut() {
                    *image = file_storage_service.get_presigned_url(image.clone()).await;
                }
                for video in assets.videos.iter_mut() {
                    *video = file_storage_service.get_presigned_url(video.clone()).await;
                }
            }
        }
        Ok(cnv_workout)
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::collection_to_entity::Entity")]
    CollectionToEntity,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    User,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::RepeatedFrom",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    RepeatedFrom,
    #[sea_orm(
        belongs_to = "super::workout_template::Entity",
        from = "Column::TemplateId",
        to = "super::workout_template::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    WorkoutTemplate,
}

impl Related<super::collection_to_entity::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CollectionToEntity.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::workout_template::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WorkoutTemplate.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
