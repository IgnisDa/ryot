//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use async_graphql::SimpleObject;
use async_trait::async_trait;
use educe::Educe;
use enum_models::SeenState;
use media_models::{
    SeenAnimeExtraInformation, SeenMangaExtraInformation, SeenPodcastExtraInformation,
    SeenShowExtraInformation,
};
use nanoid::nanoid;
use rust_decimal::Decimal;
use sea_orm::prelude::DateTimeUtc;
use sea_orm::{ActiveValue, entity::prelude::*};
use serde::{Deserialize, Serialize};

#[derive(Clone, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, SimpleObject, Educe)]
#[graphql(name = "Seen")]
#[sea_orm(table_name = "seen")]
#[educe(Debug)]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub user_id: String,
    pub state: SeenState,
    pub progress: Decimal,
    pub metadata_id: String,
    pub started_on: Option<DateTimeUtc>,
    pub finished_on: Option<DateTimeUtc>,
    #[graphql(skip)]
    #[serde(skip)]
    #[educe(Debug(ignore))]
    pub updated_at: Vec<DateTimeUtc>,
    pub manual_time_spent: Option<Decimal>,
    pub providers_consumed_on: Vec<String>,
    pub show_extra_information: Option<SeenShowExtraInformation>,
    pub anime_extra_information: Option<SeenAnimeExtraInformation>,
    pub manga_extra_information: Option<SeenMangaExtraInformation>,
    pub podcast_extra_information: Option<SeenPodcastExtraInformation>,
    // Generated columns
    pub num_times_updated: i32,
    pub review_id: Option<String>,
    pub last_updated_on: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::metadata::Entity",
        from = "Column::MetadataId",
        to = "super::metadata::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Metadata,
    #[sea_orm(
        belongs_to = "super::review::Entity",
        from = "Column::ReviewId",
        to = "super::review::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Review,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::metadata::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Metadata.def()
    }
}

impl Related<super::review::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Review.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(mut self, _db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        if insert {
            self.id = ActiveValue::Set(format!("see_{}", nanoid!(12)));
        }
        Ok(self)
    }
}
