//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "entity_to_entity")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub from_metadata_id: Option<String>,
    pub from_metadata_group_id: Option<String>,
    pub to_metadata_id: Option<String>,
    pub to_person_id: Option<String>,
    pub to_genre_id: Option<String>,
    pub to_metadata_group_id: Option<String>,
    pub relation: String,
    pub role: Option<String>,
    pub character_name: Option<String>,
    pub index_position: Option<i32>,
    pub part: Option<i32>,
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::metadata::Entity",
        from = "Column::FromMetadataId",
        to = "super::metadata::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    FromMetadata,
    #[sea_orm(
        belongs_to = "super::metadata_group::Entity",
        from = "Column::FromMetadataGroupId",
        to = "super::metadata_group::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    FromMetadataGroup,
    #[sea_orm(
        belongs_to = "super::metadata::Entity",
        from = "Column::ToMetadataId",
        to = "super::metadata::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    ToMetadata,
    #[sea_orm(
        belongs_to = "super::person::Entity",
        from = "Column::ToPersonId",
        to = "super::person::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    ToPerson,
    #[sea_orm(
        belongs_to = "super::genre::Entity",
        from = "Column::ToGenreId",
        to = "super::genre::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    ToGenre,
    #[sea_orm(
        belongs_to = "super::metadata_group::Entity",
        from = "Column::ToMetadataGroupId",
        to = "super::metadata_group::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    ToMetadataGroup,
}

impl Related<super::metadata::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FromMetadata.def()
    }
}

impl Related<super::metadata_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FromMetadataGroup.def()
    }
}

impl Related<super::person::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ToPerson.def()
    }
}

impl Related<super::genre::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ToGenre.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
