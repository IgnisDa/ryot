//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use async_graphql::SimpleObject;
use async_trait::async_trait;
use enum_models::{NotificationPlatformLot, UserNotificationContent};
use nanoid::nanoid;
use sea_orm::{ActiveValue, entity::prelude::*};
use user_models::NotificationPlatformSpecifics;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, SimpleObject)]
#[sea_orm(table_name = "notification_platform")]
#[graphql(name = "NotificationPlatform")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: String,
    #[graphql(skip)]
    pub user_id: String,
    pub description: String,
    pub is_disabled: Option<bool>,
    pub lot: NotificationPlatformLot,
    pub created_on: DateTimeWithTimeZone,
    pub configured_events: Vec<UserNotificationContent>,
    #[graphql(skip)]
    pub platform_specifics: NotificationPlatformSpecifics,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    User,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(mut self, _db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        if insert {
            self.id = ActiveValue::Set(format!("ntf_{}", nanoid!(12)));
        }
        Ok(self)
    }
}
