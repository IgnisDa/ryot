import{_ as e,c as a,o as t,ah as s,ai as n,aj as o}from"./chunks/framework.CCLJEThB.js";const g=JSON.parse('{"title":"Authentication","description":"","frontmatter":{},"headers":[],"relativePath":"guides/authentication.md","filePath":"guides/authentication.md","lastUpdated":1761973425000}'),l={name:"guides/authentication.md"};function h(r,i,d,p,c,u){return t(),a("div",null,i[0]||(i[0]=[s(`<h1 id="authentication" tabindex="-1">Authentication <a class="header-anchor" href="#authentication" aria-label="Permalink to “Authentication”">​</a></h1><p>Ryot supports multiple authentication methods. By default, it uses local authentication which means that you can log in using a username and password.</p><h2 id="openid" tabindex="-1">OpenID <a class="header-anchor" href="#openid" aria-label="Permalink to “OpenID”">​</a></h2><p>Ryot can be configured to use OpenID Connect (OIDC) for authentication. The following environment variables need to be set:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FRONTEND_URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://app.ryot.io</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # The URL of your Ryot instance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SERVER_OIDC_CLIENT_ID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">********</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SERVER_OIDC_CLIENT_SECRET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">********</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SERVER_OIDC_ISSUER_URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://accounts.google.com</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # The URL of your OIDC provider (might end with trailing slash)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Below are optional</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FRONTEND_OIDC_BUTTON_LABEL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Google</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RUST_LOG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ryot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">debug</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # To debug why OIDC authentication is failing</span></span></code></pre></div><p>In your OIDC provider, you will need to set the redirect URL to <code>&lt;FRONTEND_URL&gt;/api/auth</code>. The scopes required are <code>openid email</code>.</p><p>Once these are set, restart your Ryot instance and you should be able to see the button to &quot;Continue with OpenID Connect&quot; on the authentication pages. New users will have their username set to their email address. This can be changed later in the profile settings.</p><p>You can set <code>USERS_DISABLE_LOCAL_AUTH=true</code> to disable local authentication and only allow users to authenticate using OIDC. When OIDC is enabled and local authentication is disabled, users will be redirected to the OIDC provider when they visit the auth page. To see the authentication page anyway, you can visit <code>&lt;FRONTEND_URL&gt;/auth?autoOidcLaunch=false</code>.</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>A user can either have a username/password or it can use your OIDC provider to authenticate but not both.</p></div><h3 id="converting-a-local-user-to-an-oidc-user" tabindex="-1">Converting a local user to an OIDC user <a class="header-anchor" href="#converting-a-local-user-to-an-oidc-user" aria-label="Permalink to “Converting a local user to an OIDC user”">​</a></h3><ul><li>Setup OpenID on your instance using the the above guide.</li><li>Make a backup of your database using this <a href="./../exporting.html#exporting-the-entire-database">guide</a>.</li><li>Logout of your original account and then click on &quot;Continue with OpenID Connect&quot;. Continue with user you want to select, after which a new account will be created.</li><li>Let&#39;s say that I want <code>IgnisDa</code> below to be able to login using OIDC (of <code>ignisda2001@gmail.com</code>): <img src="`+n+'" alt="image"></li><li>Drop into your database (<code>docker exec -u postgres -it ryot-db psql</code>) and copy the <code>oidc_issuer_id</code> (<code>104798859970005336426</code> here) of the new user and then delete it using <code>DELETE FROM &quot;user&quot; WHERE id = &#39;usr_v5aGOC9UzrId&#39;;</code></li><li>Update details of the old user using <code>UPDATE &quot;user&quot; SET oidc_issuer_id = &#39;104798859970005336426&#39;, password = NULL WHERE id = &#39;usr_ujrD0pCeKc1Y&#39;;</code>. After this, it should look like this: <img src="'+o+'" alt="image"></li></ul><p>You should now be able login using OIDC. The same procedure needs to be followed for all users that want their provider changed to OIDC.</p>',12)]))}const E=e(l,[["render",h]]);export{g as __pageData,E as default};
