//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::migrator::PersonToPartialMetadataRelation;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "person_to_partial_metadata")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub person_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub partial_metadata_id: i32,
    pub relation: PersonToPartialMetadataRelation,
    pub role: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::partial_metadata::Entity",
        from = "Column::PartialMetadataId",
        to = "super::partial_metadata::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PartialMetadata,
    #[sea_orm(
        belongs_to = "super::person::Entity",
        from = "Column::PersonId",
        to = "super::person::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Person,
}

impl Related<super::partial_metadata::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PartialMetadata.def()
    }
}

impl Related<super::person::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Person.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
