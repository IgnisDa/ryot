//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use async_graphql::SimpleObject;
use async_trait::async_trait;
use boilermates::boilermates;
use database::{MetadataLot, MetadataSource};
use sea_orm::{entity::prelude::*, ActiveValue};
use serde::{Deserialize, Serialize};

use crate::entities::prelude::Metadata;

use super::metadata;

#[boilermates("PartialMetadataWithoutId")]
#[boilermates(attr_for(
    "PartialMetadataWithoutId",
    "#[derive(Debug, Serialize, Deserialize, Clone, PartialEq, Eq, Hash)]"
))]
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, SimpleObject)]
#[sea_orm(table_name = "partial_metadata")]
#[graphql(name = "PartialMetadata")]
pub struct Model {
    #[boilermates(not_in("PartialMetadataWithoutId"))]
    #[sea_orm(primary_key)]
    #[graphql(skip)]
    pub id: i32,
    pub identifier: String,
    pub title: String,
    pub image: Option<String>,
    pub lot: MetadataLot,
    pub source: MetadataSource,
    #[boilermates(not_in("PartialMetadataWithoutId"))]
    pub metadata_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::metadata_to_partial_metadata::Entity")]
    MetadataToPartialMetadata,
    #[sea_orm(has_many = "super::partial_metadata_to_metadata_group::Entity")]
    PartialMetadataToMetadataGroup,
}

impl Related<super::metadata_to_partial_metadata::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MetadataToPartialMetadata.def()
    }
}

impl Related<super::partial_metadata_to_metadata_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PartialMetadataToMetadataGroup.def()
    }
}

impl Related<super::metadata::Entity> for Entity {
    fn to() -> RelationDef {
        super::metadata_to_partial_metadata::Relation::Metadata.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::metadata_to_partial_metadata::Relation::PartialMetadata
                .def()
                .rev(),
        )
    }
}

impl Related<super::metadata_group::Entity> for Entity {
    fn to() -> RelationDef {
        super::partial_metadata_to_metadata_group::Relation::MetadataGroup.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::partial_metadata_to_metadata_group::Relation::PartialMetadata
                .def()
                .rev(),
        )
    }
}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(mut self, db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        if insert {
            let copied = self.clone();
            if let Some(m) = Metadata::find()
                .filter(metadata::Column::Identifier.eq(copied.identifier.unwrap()))
                .filter(metadata::Column::Lot.eq(copied.lot.unwrap()))
                .filter(metadata::Column::Source.eq(copied.source.unwrap()))
                .one(db)
                .await?
            {
                self.metadata_id = ActiveValue::Set(Some(m.id));
            }
        }
        Ok(self)
    }
}
