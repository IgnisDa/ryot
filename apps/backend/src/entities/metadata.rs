//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use chrono::NaiveDate;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::{
    migrator::{MetadataLot, MetadataSource},
    models::media::{MediaSpecifics, MetadataImages},
};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, Default)]
#[sea_orm(table_name = "metadata")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub created_on: DateTimeUtc,
    pub lot: MetadataLot,
    pub last_updated_on: DateTimeUtc,
    pub title: String,
    #[sea_orm(indexed)]
    pub identifier: String,
    pub description: Option<String>,
    pub publish_year: Option<i32>,
    pub publish_date: Option<NaiveDate>,
    pub images: MetadataImages,
    pub source: MetadataSource,
    pub specifics: MediaSpecifics,
    pub production_status: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::metadata_to_collection::Entity")]
    MetadataToCollection,
    #[sea_orm(has_many = "super::metadata_to_creator::Entity")]
    MetadataToCreator,
    #[sea_orm(has_many = "super::metadata_to_genre::Entity")]
    MetadataToGenre,
    #[sea_orm(has_many = "super::metadata_to_suggestion::Entity")]
    MetadataToSuggestion,
    #[sea_orm(has_many = "super::review::Entity")]
    Review,
    #[sea_orm(has_many = "super::seen::Entity")]
    Seen,
    #[sea_orm(has_many = "super::user_to_metadata::Entity")]
    UserToMetadata,
}

impl Related<super::metadata_to_collection::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MetadataToCollection.def()
    }
}

impl Related<super::metadata_to_creator::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MetadataToCreator.def()
    }
}

impl Related<super::metadata_to_genre::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MetadataToGenre.def()
    }
}

impl Related<super::metadata_to_suggestion::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MetadataToSuggestion.def()
    }
}

impl Related<super::review::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Review.def()
    }
}

impl Related<super::seen::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Seen.def()
    }
}

impl Related<super::user_to_metadata::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserToMetadata.def()
    }
}

impl Related<super::collection::Entity> for Entity {
    fn to() -> RelationDef {
        super::metadata_to_collection::Relation::Collection.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::metadata_to_collection::Relation::Metadata
                .def()
                .rev(),
        )
    }
}

impl Related<super::genre::Entity> for Entity {
    fn to() -> RelationDef {
        super::metadata_to_genre::Relation::Genre.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::metadata_to_genre::Relation::Metadata.def().rev())
    }
}

impl Related<super::suggestion::Entity> for Entity {
    fn to() -> RelationDef {
        super::metadata_to_suggestion::Relation::Suggestion.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::metadata_to_suggestion::Relation::Metadata
                .def()
                .rev(),
        )
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_to_metadata::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_to_metadata::Relation::Metadata.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
