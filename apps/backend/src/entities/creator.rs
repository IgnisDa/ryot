//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

// FIXME: Remove this file

use async_graphql::SimpleObject;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, SimpleObject)]
#[graphql(name = "Creator")]
#[sea_orm(table_name = "creator")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub name: String,
    pub image: Option<String>,
    pub extra_information: Json,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::metadata_to_creator::Entity")]
    MetadataToCreator,
}

impl Related<super::metadata_to_creator::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MetadataToCreator.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
