//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use async_graphql::SimpleObject;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::{
    migrator::{ExerciseEquipment, ExerciseForce, ExerciseLevel, ExerciseLot, ExerciseMechanic},
    models::fitness::{ExerciseAttributes, ExerciseMuscles},
};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, SimpleObject)]
#[sea_orm(table_name = "exercise")]
#[graphql(name = "Exercise")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub name: String,
    #[sea_orm(unique)]
    pub identifier: String,
    pub lot: ExerciseLot,
    pub level: ExerciseLevel,
    pub force: Option<ExerciseForce>,
    pub mechanic: Option<ExerciseMechanic>,
    pub equipment: Option<ExerciseEquipment>,
    pub attributes: ExerciseAttributes,
    // FIXME: Display muscle in frontend list when https://github.com/SeaQL/sea-orm/issues/1517
    // is fixed.
    #[graphql(skip)]
    pub muscles: ExerciseMuscles,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::user_to_exercise::Entity")]
    UserToExercise,
}

impl Related<super::user_to_exercise::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserToExercise.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_to_exercise::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_to_exercise::Relation::Exercise.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
