//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use std::sync::Arc;

use async_graphql::{InputObject, SimpleObject};
use sea_orm::{entity::prelude::*, FromQueryResult};
use serde::{Deserialize, Serialize};

use crate::{
    file_storage::FileStorageService,
    migrator::{
        ExerciseEquipment, ExerciseForce, ExerciseLevel, ExerciseLot, ExerciseMechanic,
        ExerciseMuscle, ExerciseSource,
    },
    models::fitness::{ExerciseAttributes, ExerciseMuscles},
    utils::get_stored_asset,
};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    SimpleObject,
    InputObject,
)]
#[sea_orm(table_name = "exercise")]
#[graphql(name = "Exercise", input_name = "ExerciseInput")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub name: String,
    #[graphql(skip)]
    #[sea_orm(unique)]
    pub identifier: Option<String>,
    pub lot: ExerciseLot,
    pub level: ExerciseLevel,
    pub force: Option<ExerciseForce>,
    pub mechanic: Option<ExerciseMechanic>,
    pub equipment: Option<ExerciseEquipment>,
    pub source: ExerciseSource,
    #[graphql(skip)]
    pub muscles: ExerciseMuscles,
    pub attributes: ExerciseAttributes,
}

impl Model {
    pub async fn graphql_repr(self, file_storage_service: &Arc<FileStorageService>) -> Self {
        let mut converted_exercise = self.clone();
        let mut images = vec![];
        for image in self.attributes.internal_images.iter() {
            images.push(get_stored_asset(image.clone(), file_storage_service).await);
        }
        converted_exercise.attributes.images = images;
        // FIXME: Remove when https://github.com/SeaQL/sea-orm/issues/1517 is fixed.
        converted_exercise.attributes.muscles = self.muscles.0;
        converted_exercise
    }
}

#[derive(Clone, Debug, Deserialize, SimpleObject, FromQueryResult)]
pub struct ExerciseListItem {
    pub id: i32,
    pub lot: ExerciseLot,
    pub name: String,
    #[graphql(skip)]
    pub attributes: ExerciseAttributes,
    pub num_times_performed: Option<i32>,
    pub muscle: Option<ExerciseMuscle>,
    pub image: Option<String>,
    #[graphql(skip)]
    pub muscles: ExerciseMuscles,
}

impl ExerciseListItem {
    pub async fn graphql_repr(self, file_storage_service: &Arc<FileStorageService>) -> Self {
        let mut converted_exercise = self.clone();
        if let Some(img) = self.attributes.internal_images.first() {
            converted_exercise.image =
                Some(get_stored_asset(img.clone(), file_storage_service).await);
        }
        converted_exercise.muscle = self.muscles.0.first().cloned();
        converted_exercise
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::collection_to_entity::Entity")]
    CollectionToEntity,
    #[sea_orm(has_many = "super::user_to_exercise::Entity")]
    UserToExercise,
}

impl Related<super::collection_to_entity::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CollectionToEntity.def()
    }
}

impl Related<super::user_to_exercise::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserToExercise.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_to_exercise::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_to_exercise::Relation::Exercise.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
