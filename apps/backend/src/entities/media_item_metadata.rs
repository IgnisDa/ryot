//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use chrono::{DateTime, Utc};
use sea_orm::entity::prelude::*;

// The different types of media that can be stored
#[derive(Clone, Debug, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "String(Some(1))")]
pub enum MediaItemLot {
    #[sea_orm(string_value = "AudioBook")]
    AudioBook,
    #[sea_orm(string_value = "Book")]
    Book,
    #[sea_orm(string_value = "Movie")]
    Movie,
    #[sea_orm(string_value = "Show")]
    Show,
    #[sea_orm(string_value = "VideoGame")]
    VideoGame,
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "media_item_metadata")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub created_on: DateTime<Utc>,
    pub lot: MediaItemLot,
    pub last_updated_on: DateTime<Utc>,
    pub title: String,
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::media_item_metadata_image::Entity")]
    MediaItemMetadataImage,
}

impl Related<super::media_item_metadata_image::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MediaItemMetadataImage.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
