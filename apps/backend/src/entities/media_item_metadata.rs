//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use crate::migrator::MetadataLot;
use chrono::{DateTime, Utc};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "media_item_metadata")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub created_on: DateTime<Utc>,
    pub lot: MetadataLot,
    pub last_updated_on: DateTime<Utc>,
    pub title: String,
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::book::Entity")]
    Book,
    #[sea_orm(has_many = "super::media_item_metadata_image::Entity")]
    MediaItemMetadataImage,
}

impl Related<super::book::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Book.def()
    }
}

impl Related<super::media_item_metadata_image::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MediaItemMetadataImage.def()
    }
}

impl Related<super::creator::Entity> for Entity {
    fn to() -> RelationDef {
        super::media_item_creator::Relation::Creator.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::media_item_creator::Relation::MediaItemMetadata
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
