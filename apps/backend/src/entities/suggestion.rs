//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use async_graphql::SimpleObject;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::migrator::{MetadataLot, MetadataSource};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, SimpleObject)]
#[sea_orm(table_name = "suggestion")]
#[graphql(name = "Suggestion")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub identifier: String,
    pub title: String,
    pub image: Option<String>,
    pub lot: MetadataLot,
    pub source: MetadataSource,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::metadata_to_suggestion::Entity")]
    MetadataToSuggestion,
}

impl Related<super::metadata_to_suggestion::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MetadataToSuggestion.def()
    }
}

impl Related<super::metadata::Entity> for Entity {
    fn to() -> RelationDef {
        super::metadata_to_suggestion::Relation::Metadata.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::metadata_to_suggestion::Relation::Suggestion
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
