//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "media_item_creator")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub media_item_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub creator_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::creator::Entity",
        from = "Column::CreatorId",
        to = "super::creator::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Creator,
    #[sea_orm(
        belongs_to = "super::media_item_metadata::Entity",
        from = "Column::MediaItemId",
        to = "super::media_item_metadata::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    MediaItemMetadata,
}

impl Related<super::creator::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Creator.def()
    }
}

impl Related<super::media_item_metadata::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MediaItemMetadata.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
