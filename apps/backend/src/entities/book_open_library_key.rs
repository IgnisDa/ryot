//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "book_open_library_key")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub book_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub open_library_key_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::book::Entity",
        from = "Column::BookId",
        to = "super::book::Column::MetadataId",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Book,
    #[sea_orm(
        belongs_to = "super::open_library_key::Entity",
        from = "Column::OpenLibraryKeyId",
        to = "super::open_library_key::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    OpenLibraryKey,
}

impl Related<super::book::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Book.def()
    }
}

impl Related<super::open_library_key::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OpenLibraryKey.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
