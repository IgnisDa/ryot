//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use argon2::{
    password_hash::{rand_core::OsRng, SaltString},
    Argon2, PasswordHasher,
};
use async_graphql::SimpleObject;
use async_trait::async_trait;
use sea_orm::{entity::prelude::*, ActiveValue};
use serde::{Deserialize, Serialize};

use crate::migrator::UserLot;

fn get_hasher() -> Argon2<'static> {
    Argon2::default()
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, SimpleObject)]
#[graphql(name = "User")]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub email: Option<String>,
    #[graphql(skip)]
    pub password: String,
    pub lot: UserLot,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::seen::Entity")]
    Seen,
    #[sea_orm(has_many = "super::summary::Entity")]
    Summary,
    #[sea_orm(has_many = "super::token::Entity")]
    Token,
}

impl Related<super::seen::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Seen.def()
    }
}

impl Related<super::summary::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Summary.def()
    }
}

impl Related<super::token::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Token.def()
    }
}

impl Related<super::metadata::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_to_metadata::Relation::Metadata.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_to_metadata::Relation::User.def().rev())
    }
}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(mut self, _db: &C, _insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        let salt = SaltString::generate(&mut OsRng);
        let password_hash = get_hasher()
            .hash_password(self.password.unwrap().as_bytes(), &salt)
            .map_err(|_| DbErr::Custom("Unable to hash password".to_owned()))?
            .to_string();
        self.password = ActiveValue::Set(password_hash);
        Ok(self)
    }
}
