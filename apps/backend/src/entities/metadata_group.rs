//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::{
    migrator::{MetadataLot, MetadataSource},
    models::media::MetadataImages,
};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "metadata_group")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub parts: i32,
    pub identifier: String,
    pub title: String,
    pub images: MetadataImages,
    pub lot: MetadataLot,
    pub source: MetadataSource,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::metadata_to_metadata_group::Entity")]
    MetadataToMetadataGroup,
}

impl Related<super::metadata_to_metadata_group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MetadataToMetadataGroup.def()
    }
}

impl Related<super::metadata::Entity> for Entity {
    fn to() -> RelationDef {
        super::metadata_to_metadata_group::Relation::Metadata.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::metadata_to_metadata_group::Relation::MetadataGroup
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
