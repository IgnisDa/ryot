use std::sync::Arc;

use async_graphql::{Context, InputObject, Object, Result};
use sea_orm::DatabaseConnection;

use self::media_tracker::MediaTrackerService;

mod media_tracker;

#[derive(Debug, InputObject)]
pub struct MediaTrackerImportInput {
    /// The base url where the resource is present at
    api_url: String,
    /// An application token generated by an admin
    api_key: String,
}

#[derive(Default)]
pub struct ImporterMutation;

#[Object]
impl ImporterMutation {
    /// Add request for importing data from MediaTracker.
    async fn media_tracker_import(
        &self,
        gql_ctx: &Context<'_>,
        input: MediaTrackerImportInput,
    ) -> Result<bool> {
        gql_ctx
            .data_unchecked::<ImporterService>()
            .media_tracker_import(input)
            .await
    }
}

#[derive(Debug)]
pub struct ImporterService {
    media_tracker: Arc<MediaTrackerService>,
}

impl ImporterService {
    pub fn new(db: &DatabaseConnection) -> Self {
        Self {
            media_tracker: Arc::new(MediaTrackerService::new(&db)),
        }
    }

    pub async fn media_tracker_import(&self, input: MediaTrackerImportInput) -> Result<bool> {
        self.media_tracker.import(input).await
    }
}
