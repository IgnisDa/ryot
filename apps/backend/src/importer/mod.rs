use std::sync::Arc;

use async_graphql::{Context, InputObject, Object, Result};
use chrono::NaiveDate;
use sea_orm::prelude::DateTimeUtc;

use crate::{
    audio_books::resolver::AudioBooksService,
    books::resolver::BooksService,
    media::resolver::{MediaService, ProgressUpdate, ProgressUpdateAction},
    migrator::MetadataLot,
    misc::resolver::MiscService,
    movies::resolver::MoviesService,
    shows::resolver::ShowsService,
    utils::user_id_from_ctx,
    video_games::resolver::VideoGamesService,
};

mod media_tracker;

#[derive(Debug)]
pub struct ImportItemReview {
    date: NaiveDate,
    spoiler: bool,
    text: String,
}

#[derive(Debug)]
pub struct ImportItemRating {
    review: Option<ImportItemReview>,
    rating: Option<i32>,
}

#[derive(Debug, InputObject)]
pub struct MediaTrackerImportInput {
    /// The base url where the resource is present at
    api_url: String,
    /// An application token generated by an admin
    api_key: String,
}

#[derive(Debug)]
pub struct ImportItemSeen {
    started_on: Option<DateTimeUtc>,
    ended_on: Option<DateTimeUtc>,
    season_number: Option<i32>,
    episode_number: Option<i32>,
}

#[derive(Debug)]
pub struct ImportItem {
    lot: MetadataLot,
    identifier: String,
    seen_history: Vec<ImportItemSeen>,
    reviews: Vec<ImportItemRating>,
}

#[derive(Debug)]
pub struct ImportResult {
    media: Vec<ImportItem>,
}

#[derive(Default)]
pub struct ImporterMutation;

#[Object]
impl ImporterMutation {
    /// Add job to import data from MediaTracker.
    async fn media_tracker_import(
        &self,
        gql_ctx: &Context<'_>,
        input: MediaTrackerImportInput,
    ) -> Result<bool> {
        let user_id = user_id_from_ctx(gql_ctx).await?;
        gql_ctx
            .data_unchecked::<ImporterService>()
            .media_tracker_import(user_id, input)
            .await
    }
}

#[derive(Debug)]
pub struct ImporterService {
    audio_books_service: Arc<AudioBooksService>,
    books_service: Arc<BooksService>,
    media_service: Arc<MediaService>,
    misc_service: Arc<MiscService>,
    movies_service: Arc<MoviesService>,
    shows_service: Arc<ShowsService>,
    video_games_service: Arc<VideoGamesService>,
}

impl ImporterService {
    pub fn new(
        audio_books_service: &AudioBooksService,
        books_service: &BooksService,
        media_service: &MediaService,
        misc_service: &MiscService,
        movies_service: &MoviesService,
        shows_service: &ShowsService,
        video_games_service: &VideoGamesService,
    ) -> Self {
        Self {
            audio_books_service: Arc::new(audio_books_service.clone()),
            books_service: Arc::new(books_service.clone()),
            media_service: Arc::new(media_service.clone()),
            misc_service: Arc::new(misc_service.clone()),
            movies_service: Arc::new(movies_service.clone()),
            shows_service: Arc::new(shows_service.clone()),
            video_games_service: Arc::new(video_games_service.clone()),
        }
    }

    pub async fn media_tracker_import(
        &self,
        user_id: i32,
        input: MediaTrackerImportInput,
    ) -> Result<bool> {
        let import = media_tracker::import(input).await?;
        for item in import.media.iter() {
            let data = match item.lot {
                MetadataLot::AudioBook => {
                    self.audio_books_service
                        .commit_audio_book(&item.identifier)
                        .await
                }
                MetadataLot::Book => self.books_service.commit_book(&item.identifier).await,
                MetadataLot::Movie => self.movies_service.commit_movie(&item.identifier).await,
                MetadataLot::Show => self.shows_service.commit_show(&item.identifier).await,
                MetadataLot::VideoGame => {
                    self.video_games_service
                        .commit_video_game(&item.identifier)
                        .await
                }
            };
            let metadata = data.unwrap();
            for seen in item.seen_history.iter() {
                self.media_service
                    .progress_update(
                        ProgressUpdate {
                            metadata_id: metadata.id,
                            progress: None,
                            action: ProgressUpdateAction::InThePast,
                            date: seen.ended_on.map(|d| d.date_naive()),
                            season_number: seen.season_number,
                            episode_number: seen.episode_number,
                        },
                        user_id,
                    )
                    .await?;
            }
        }
        tracing::info!(
            "Imported {} media items from MediaTracker",
            import.media.len()
        );
        Ok(true)
    }
}
