use std::sync::Arc;

use async_graphql::{Context, InputObject, Object, Result};

use crate::{media::resolver::MediaService, migrator::MetadataLot};

mod media_tracker;

#[derive(Debug, InputObject)]
pub struct MediaTrackerImportInput {
    /// The base url where the resource is present at
    api_url: String,
    /// An application token generated by an admin
    api_key: String,
}

#[derive(Debug)]
pub struct ImportItem {
    lot: MetadataLot,
    identifier: String,
}

#[derive(Debug)]
pub struct ImportResult {
    media: Vec<ImportItem>,
}

#[derive(Default)]
pub struct ImporterMutation;

#[Object]
impl ImporterMutation {
    /// Add job to import data from MediaTracker.
    async fn media_tracker_import(
        &self,
        gql_ctx: &Context<'_>,
        input: MediaTrackerImportInput,
    ) -> Result<bool> {
        gql_ctx
            .data_unchecked::<ImporterService>()
            .media_tracker_import(input)
            .await
    }
}

#[derive(Debug)]
pub struct ImporterService {
    media_service: Arc<MediaService>,
}

impl ImporterService {
    pub fn new(media_service: &MediaService) -> Self {
        Self {
            media_service: Arc::new(media_service.clone()),
        }
    }

    pub async fn media_tracker_import(&self, input: MediaTrackerImportInput) -> Result<bool> {
        let import = media_tracker::import(input).await?;
        dbg!(&import);
        Ok(true)
    }
}
