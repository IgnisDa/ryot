/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /**
   * Implement the DateTime<Utc> scalar
   *
   * The input/output is a string in RFC3339 format.
   */
  DateTime: Date;
  Decimal: any;
  Identifier: any;
  /**
   * ISO 8601 calendar date without timezone.
   * Format: %Y-%m-%d
   *
   * # Examples
   *
   * * `1994-11-13`
   * * `2000-02-24`
   */
  NaiveDate: any;
};

export type AddMediaToCollection = {
  collectionName: Scalars['String'];
  mediaId: Scalars['Identifier'];
};

export type AnimeSpecifics = {
  episodes?: Maybe<Scalars['Int']>;
};

export type AnimeSpecificsInput = {
  episodes?: InputMaybe<Scalars['Int']>;
};

export type AnimeSummary = {
  episodes: Scalars['Int'];
  watched: Scalars['Int'];
};

export type AudioBookSpecifics = {
  runtime?: Maybe<Scalars['Int']>;
};

export type AudioBookSpecificsInput = {
  runtime?: InputMaybe<Scalars['Int']>;
};

export type AudioBooksSummary = {
  played: Scalars['Int'];
  runtime: Scalars['Int'];
};

export type BookSpecifics = {
  pages?: Maybe<Scalars['Int']>;
};

export type BookSpecificsInput = {
  pages?: InputMaybe<Scalars['Int']>;
};

export type BooksSummary = {
  pages: Scalars['Int'];
  read: Scalars['Int'];
};

export type Collection = {
  createdOn: Scalars['DateTime'];
  id: Scalars['Int'];
  name: Scalars['String'];
};

export type CollectionItem = {
  collectionDetails: Collection;
  mediaDetails: Array<MediaSearchItem>;
};

export type CoreDetails = {
  authorName: Scalars['String'];
  repositoryLink: Scalars['String'];
  usernameChangeAllowed: Scalars['Boolean'];
  version: Scalars['String'];
};

export type CreateCustomMediaError = {
  error: CreateCustomMediaErrorVariant;
};

export enum CreateCustomMediaErrorVariant {
  LotDoesNotMatchSpecifics = 'LOT_DOES_NOT_MATCH_SPECIFICS'
}

export type CreateCustomMediaInput = {
  animeSpecifics?: InputMaybe<AnimeSpecificsInput>;
  audioBookSpecifics?: InputMaybe<AudioBookSpecificsInput>;
  bookSpecifics?: InputMaybe<BookSpecificsInput>;
  creators?: InputMaybe<Array<Scalars['String']>>;
  description?: InputMaybe<Scalars['String']>;
  genres?: InputMaybe<Array<Scalars['String']>>;
  images?: InputMaybe<Array<Scalars['String']>>;
  lot: MetadataLot;
  mangaSpecifics?: InputMaybe<MangaSpecificsInput>;
  movieSpecifics?: InputMaybe<MovieSpecificsInput>;
  podcastSpecifics?: InputMaybe<PodcastSpecificsInput>;
  publishYear?: InputMaybe<Scalars['Int']>;
  showSpecifics?: InputMaybe<ShowSpecificsInput>;
  title: Scalars['String'];
  videoGameSpecifics?: InputMaybe<VideoGameSpecificsInput>;
};

export type CreateCustomMediaResult = CreateCustomMediaError | IdObject;

export type DeployGoodreadsImportInput = {
  rssUrl: Scalars['String'];
};

export type DeployImportInput = {
  goodreads?: InputMaybe<DeployGoodreadsImportInput>;
  mediaTracker?: InputMaybe<DeployMediaTrackerImportInput>;
  source: MediaImportSource;
};

export type DeployMediaTrackerImportInput = {
  /** An application token generated by an admin */
  apiKey: Scalars['String'];
  /** The base url where the resource is present at */
  apiUrl: Scalars['String'];
};

export type DetailedMediaSearchResults = {
  items: Array<MediaSearchItemResponse>;
  nextPage?: Maybe<Scalars['Int']>;
  total: Scalars['Int'];
};

export type FeatureEnabled = {
  general: GeneralFeatures;
  metadata: MetadataFeatureEnabled;
};

export type GeneralFeatureEnabled = {
  enabled: Scalars['Boolean'];
};

export type GeneralFeatures = {
  fileStorage: GeneralFeatureEnabled;
};

export type GraphqlMediaDetails = {
  animeSpecifics?: Maybe<AnimeSpecifics>;
  audioBookSpecifics?: Maybe<AudioBookSpecifics>;
  backdropImages: Array<Scalars['String']>;
  bookSpecifics?: Maybe<BookSpecifics>;
  creators: Array<MetadataCreator>;
  description?: Maybe<Scalars['String']>;
  genres: Array<Scalars['String']>;
  id: Scalars['Int'];
  identifier: Scalars['String'];
  lot: MetadataLot;
  mangaSpecifics?: Maybe<MangaSpecifics>;
  movieSpecifics?: Maybe<MovieSpecifics>;
  podcastSpecifics?: Maybe<PodcastSpecifics>;
  posterImages: Array<Scalars['String']>;
  publishDate?: Maybe<Scalars['NaiveDate']>;
  publishYear?: Maybe<Scalars['Int']>;
  showSpecifics?: Maybe<ShowSpecifics>;
  source: MetadataSource;
  sourceUrl?: Maybe<Scalars['String']>;
  title: Scalars['String'];
  videoGameSpecifics?: Maybe<VideoGameSpecifics>;
};

export type IdObject = {
  id: Scalars['Identifier'];
};

export type ImportDetails = {
  total: Scalars['Int'];
};

/** The various steps in which media importing can fail */
export enum ImportFailStep {
  /** Failed to get details from the source itself (for eg: MediaTracker, Goodreads etc.) */
  ItemDetailsFromSource = 'ITEM_DETAILS_FROM_SOURCE',
  /** Failed to get metadata from the provider (for eg: Openlibrary, IGDB etc.) */
  MediaDetailsFromProvider = 'MEDIA_DETAILS_FROM_PROVIDER'
}

export type ImportFailedItem = {
  error?: Maybe<Scalars['String']>;
  identifier: Scalars['String'];
  lot: MetadataLot;
  step: ImportFailStep;
};

export type ImportResultResponse = {
  failedItems: Array<ImportFailedItem>;
  import: ImportDetails;
  source: MediaImportSource;
};

export type LoginError = {
  error: LoginErrorVariant;
};

export enum LoginErrorVariant {
  CredentialsMismatch = 'CREDENTIALS_MISMATCH',
  MutexError = 'MUTEX_ERROR',
  UsernameDoesNotExist = 'USERNAME_DOES_NOT_EXIST'
}

export type LoginResponse = {
  apiKey: Scalars['String'];
};

export type LoginResult = LoginError | LoginResponse;

export type MangaSpecifics = {
  chapters?: Maybe<Scalars['Int']>;
  volumes?: Maybe<Scalars['Int']>;
};

export type MangaSpecificsInput = {
  chapters?: InputMaybe<Scalars['Int']>;
  volumes?: InputMaybe<Scalars['Int']>;
};

export type MangaSummary = {
  chapters: Scalars['Int'];
  read: Scalars['Int'];
};

export enum MediaFilter {
  All = 'ALL',
  Dropped = 'DROPPED',
  Rated = 'RATED',
  Unrated = 'UNRATED',
  Unseen = 'UNSEEN'
}

export type MediaImportReport = {
  details?: Maybe<ImportResultResponse>;
  finishedOn?: Maybe<Scalars['DateTime']>;
  id: Scalars['Int'];
  source: MediaImportSource;
  startedOn: Scalars['DateTime'];
  success?: Maybe<Scalars['Boolean']>;
  userId: Scalars['Int'];
};

export enum MediaImportSource {
  Goodreads = 'GOODREADS',
  MediaTracker = 'MEDIA_TRACKER'
}

export type MediaListInput = {
  filter?: InputMaybe<MediaFilter>;
  lot: MetadataLot;
  page: Scalars['Int'];
  query?: InputMaybe<Scalars['String']>;
  sort?: InputMaybe<MediaSortInput>;
};

export type MediaSearchItem = {
  identifier: Scalars['String'];
  images: Array<Scalars['String']>;
  lot: MetadataLot;
  publishYear?: Maybe<Scalars['Int']>;
  title: Scalars['String'];
};

export type MediaSearchItemResponse = {
  databaseId?: Maybe<Scalars['Identifier']>;
  item: MediaSearchItem;
};

export type MediaSearchResults = {
  items: Array<MediaSearchItem>;
  nextPage?: Maybe<Scalars['Int']>;
  total: Scalars['Int'];
};

export enum MediaSortBy {
  LastSeen = 'LAST_SEEN',
  Rating = 'RATING',
  ReleaseDate = 'RELEASE_DATE',
  Title = 'TITLE'
}

export type MediaSortInput = {
  by?: MediaSortBy;
  order?: MediaSortOrder;
};

export enum MediaSortOrder {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type MetadataCreator = {
  imageUrls: Array<Scalars['String']>;
  name: Scalars['String'];
  role: Scalars['String'];
};

export type MetadataFeatureEnabled = {
  anime: Scalars['Boolean'];
  audioBooks: Scalars['Boolean'];
  books: Scalars['Boolean'];
  manga: Scalars['Boolean'];
  movies: Scalars['Boolean'];
  podcasts: Scalars['Boolean'];
  shows: Scalars['Boolean'];
  videoGames: Scalars['Boolean'];
};

export enum MetadataLot {
  Anime = 'ANIME',
  AudioBook = 'AUDIO_BOOK',
  Book = 'BOOK',
  Manga = 'MANGA',
  Movie = 'MOVIE',
  Podcast = 'PODCAST',
  Show = 'SHOW',
  VideoGame = 'VIDEO_GAME'
}

export enum MetadataSource {
  Anilist = 'ANILIST',
  Audible = 'AUDIBLE',
  Custom = 'CUSTOM',
  Igdb = 'IGDB',
  Listennotes = 'LISTENNOTES',
  Openlibrary = 'OPENLIBRARY',
  Tmdb = 'TMDB'
}

export type MovieSpecifics = {
  runtime?: Maybe<Scalars['Int']>;
};

export type MovieSpecificsInput = {
  runtime?: InputMaybe<Scalars['Int']>;
};

export type MoviesSummary = {
  runtime: Scalars['Int'];
  watched: Scalars['Int'];
};

export type MutationRoot = {
  /** Add a media item to a collection if it is not there, otherwise do nothing. */
  addMediaToCollection: Scalars['Boolean'];
  /** Fetch details about a media and create a media item in the database. */
  commitMedia: IdObject;
  /** Load next 10 episodes of a podcast if they exist. */
  commitNext10PodcastEpisodes: Scalars['Boolean'];
  /** Create a new collection for the logged in user. */
  createCollection: IdObject;
  /** Create a custom media item. */
  createCustomMedia: CreateCustomMediaResult;
  /** Delete a collection. */
  deleteCollection: Scalars['Boolean'];
  /** Delete a review if it belongs to the user. */
  deleteReview: Scalars['Boolean'];
  /** Delete a seen item from a user's history. */
  deleteSeenItem: IdObject;
  /** Add job to import data from various sources. */
  deployImport: Scalars['String'];
  /** Deploy a job to update a media item's metadata. */
  deployUpdateMetadataJob: Scalars['String'];
  /** Generate an auth token without any expiry */
  generateApplicationToken: Scalars['String'];
  /** Login a user using their username and password and return an API key. */
  loginUser: LoginResult;
  /** Logout a user from the server, deleting their login token. */
  logoutUser: Scalars['Boolean'];
  /**
   * Merge a media item into another. This will move all `seen` and `review`
   * items with the new user and then delete the old media item completely.
   */
  mergeMetadata: Scalars['Boolean'];
  /** Create or update a review. */
  postReview: IdObject;
  /** Mark a user's progress on a specific media item. */
  progressUpdate: IdObject;
  /** Delete all summaries for the currently logged in user and then generate one from scratch. */
  regenerateUserSummary: Scalars['Boolean'];
  /**
   * Create a new user for the service. Also set their `lot` as admin if
   * they are the first user.
   */
  registerUser: RegisterResult;
  /** Remove a media item from a collection if it is not there, otherwise do nothing. */
  removeMediaFromCollection: IdObject;
  /** Deploy jobs to update all media item's metadata. */
  updateAllMetadata: Scalars['Boolean'];
  /** Update a user's profile details. */
  updateUser: IdObject;
  /** Change a user's preferences */
  updateUserPreferences: Scalars['Boolean'];
};


export type MutationRootAddMediaToCollectionArgs = {
  input: AddMediaToCollection;
};


export type MutationRootCommitMediaArgs = {
  identifier: Scalars['String'];
  lot: MetadataLot;
};


export type MutationRootCommitNext10PodcastEpisodesArgs = {
  podcastId: Scalars['Identifier'];
};


export type MutationRootCreateCollectionArgs = {
  input: NamedObjectInput;
};


export type MutationRootCreateCustomMediaArgs = {
  input: CreateCustomMediaInput;
};


export type MutationRootDeleteCollectionArgs = {
  collectionName: Scalars['String'];
};


export type MutationRootDeleteReviewArgs = {
  reviewId: Scalars['Identifier'];
};


export type MutationRootDeleteSeenItemArgs = {
  seenId: Scalars['Identifier'];
};


export type MutationRootDeployImportArgs = {
  input: DeployImportInput;
};


export type MutationRootDeployUpdateMetadataJobArgs = {
  metadataId: Scalars['Identifier'];
};


export type MutationRootLoginUserArgs = {
  input: UserInput;
};


export type MutationRootMergeMetadataArgs = {
  mergeFrom: Scalars['Identifier'];
  mergeInto: Scalars['Identifier'];
};


export type MutationRootPostReviewArgs = {
  input: PostReviewInput;
};


export type MutationRootProgressUpdateArgs = {
  input: ProgressUpdate;
};


export type MutationRootRegisterUserArgs = {
  input: UserInput;
};


export type MutationRootRemoveMediaFromCollectionArgs = {
  collectionName: Scalars['String'];
  metadataId: Scalars['Identifier'];
};


export type MutationRootUpdateUserArgs = {
  input: UpdateUserInput;
};


export type MutationRootUpdateUserPreferencesArgs = {
  input: UpdateUserPreferencesInput;
};

export type NamedObjectInput = {
  name: Scalars['String'];
};

export type PodcastEpisode = {
  id: Scalars['String'];
  number: Scalars['Int'];
  overview?: Maybe<Scalars['String']>;
  publishDate: Scalars['Int'];
  runtime?: Maybe<Scalars['Int']>;
  thumbnail?: Maybe<Scalars['String']>;
  title: Scalars['String'];
};

export type PodcastEpisodeInput = {
  id: Scalars['String'];
  number: Scalars['Int'];
  overview?: InputMaybe<Scalars['String']>;
  publishDate: Scalars['Int'];
  runtime?: InputMaybe<Scalars['Int']>;
  thumbnail?: InputMaybe<Scalars['String']>;
  title: Scalars['String'];
};

export type PodcastSpecifics = {
  episodes: Array<PodcastEpisode>;
  totalEpisodes: Scalars['Int'];
};

export type PodcastSpecificsInput = {
  episodes: Array<PodcastEpisodeInput>;
  totalEpisodes: Scalars['Int'];
};

export type PodcastsSummary = {
  played: Scalars['Int'];
  playedEpisodes: Scalars['Int'];
  runtime: Scalars['Int'];
};

export type PostReviewInput = {
  date?: InputMaybe<Scalars['DateTime']>;
  episodeNumber?: InputMaybe<Scalars['Int']>;
  /** If this review comes from a different source, this should be set */
  identifier?: InputMaybe<Scalars['String']>;
  metadataId: Scalars['Identifier'];
  rating?: InputMaybe<Scalars['Decimal']>;
  /** ID of the review if this is an update to an existing review */
  reviewId?: InputMaybe<Scalars['Identifier']>;
  seasonNumber?: InputMaybe<Scalars['Int']>;
  spoiler?: InputMaybe<Scalars['Boolean']>;
  text?: InputMaybe<Scalars['String']>;
  visibility?: InputMaybe<ReviewVisibility>;
};

export type ProgressUpdate = {
  date?: InputMaybe<Scalars['NaiveDate']>;
  /** If this update comes from a different source, this should be set */
  identifier?: InputMaybe<Scalars['String']>;
  metadataId: Scalars['Identifier'];
  podcastEpisodeNumber?: InputMaybe<Scalars['Int']>;
  progress?: InputMaybe<Scalars['Int']>;
  showEpisodeNumber?: InputMaybe<Scalars['Int']>;
  showSeasonNumber?: InputMaybe<Scalars['Int']>;
};

export type QueryRoot = {
  /** Get all collections for the currently logged in user. */
  collections: Array<CollectionItem>;
  /** Get some primary information about the service */
  coreDetails: CoreDetails;
  /** Get a presigned URL (valid for 90 minutes) for a given key. */
  getPresignedUrl: Scalars['String'];
  /** Get details about a media present in the database. */
  mediaDetails: GraphqlMediaDetails;
  /** Check if a media with the given metadata and identifier exists in the database. */
  mediaExistsInDatabase?: Maybe<IdObject>;
  /** Get all the import jobs deployed by the user */
  mediaImportReports: Array<MediaImportReport>;
  /** Get all the public reviews for a media item. */
  mediaItemReviews: Array<ReviewItem>;
  /** Get all the media items related to a user for a specific media type. */
  mediaList: MediaSearchResults;
  /** Search for a list of media for a given type. */
  mediaSearch: DetailedMediaSearchResults;
  /** Get the user's seen history for a particular media item. */
  seenHistory: Array<Seen>;
  /** Get details about the currently logged in user. */
  userDetails: UserDetailsResult;
  /** Get all the features that are enabled for the service */
  userEnabledFeatures: FeatureEnabled;
  /** Get a summary of all the media items that have been consumed by this user. */
  userSummary: UserSummary;
};


export type QueryRootGetPresignedUrlArgs = {
  key: Scalars['String'];
};


export type QueryRootMediaDetailsArgs = {
  metadataId: Scalars['Identifier'];
};


export type QueryRootMediaExistsInDatabaseArgs = {
  identifier: Scalars['String'];
  lot: MetadataLot;
};


export type QueryRootMediaItemReviewsArgs = {
  metadataId: Scalars['Identifier'];
};


export type QueryRootMediaListArgs = {
  input: MediaListInput;
};


export type QueryRootMediaSearchArgs = {
  input: SearchInput;
  lot: MetadataLot;
};


export type QueryRootSeenHistoryArgs = {
  metadataId: Scalars['Identifier'];
};

export type RegisterError = {
  error: RegisterErrorVariant;
};

export enum RegisterErrorVariant {
  UsernameAlreadyExists = 'USERNAME_ALREADY_EXISTS'
}

export type RegisterResult = IdObject | RegisterError;

export type ReviewItem = {
  episodeNumber?: Maybe<Scalars['Int']>;
  id: Scalars['Identifier'];
  podcastEpisodeId?: Maybe<Scalars['Int']>;
  postedBy: ReviewPostedBy;
  postedOn: Scalars['DateTime'];
  rating?: Maybe<Scalars['Decimal']>;
  seasonNumber?: Maybe<Scalars['Int']>;
  spoiler: Scalars['Boolean'];
  text?: Maybe<Scalars['String']>;
  visibility: ReviewVisibility;
};

export type ReviewPostedBy = {
  id: Scalars['Identifier'];
  name: Scalars['String'];
};

export enum ReviewVisibility {
  Private = 'PRIVATE',
  Public = 'PUBLIC'
}

export type SearchInput = {
  page?: InputMaybe<Scalars['Int']>;
  query: Scalars['String'];
};

export type Seen = {
  dropped: Scalars['Boolean'];
  finishedOn?: Maybe<Scalars['NaiveDate']>;
  id: Scalars['Int'];
  lastUpdatedOn: Scalars['DateTime'];
  metadataId: Scalars['Int'];
  podcastInformation?: Maybe<SeenPodcastExtraInformation>;
  progress: Scalars['Int'];
  showInformation?: Maybe<SeenShowExtraInformation>;
  startedOn?: Maybe<Scalars['NaiveDate']>;
  userId: Scalars['Int'];
};

export type SeenPodcastExtraInformation = {
  episode: Scalars['Int'];
};

export type SeenShowExtraInformation = {
  episode: Scalars['Int'];
  season: Scalars['Int'];
};

export type ShowEpisode = {
  episodeNumber: Scalars['Int'];
  id: Scalars['Int'];
  name: Scalars['String'];
  overview?: Maybe<Scalars['String']>;
  posterImages: Array<Scalars['String']>;
  publishDate?: Maybe<Scalars['NaiveDate']>;
  runtime?: Maybe<Scalars['Int']>;
};

export type ShowEpisodeSpecificsInput = {
  episodeNumber: Scalars['Int'];
  id: Scalars['Int'];
  name: Scalars['String'];
  overview?: InputMaybe<Scalars['String']>;
  posterImages: Array<Scalars['String']>;
  publishDate?: InputMaybe<Scalars['NaiveDate']>;
  runtime?: InputMaybe<Scalars['Int']>;
};

export type ShowSeason = {
  backdropImages: Array<Scalars['String']>;
  episodes: Array<ShowEpisode>;
  id: Scalars['Int'];
  name: Scalars['String'];
  overview?: Maybe<Scalars['String']>;
  posterImages: Array<Scalars['String']>;
  publishDate?: Maybe<Scalars['NaiveDate']>;
  seasonNumber: Scalars['Int'];
};

export type ShowSeasonSpecificsInput = {
  backdropImages: Array<Scalars['String']>;
  episodes: Array<ShowEpisodeSpecificsInput>;
  id: Scalars['Int'];
  name: Scalars['String'];
  overview?: InputMaybe<Scalars['String']>;
  posterImages: Array<Scalars['String']>;
  publishDate?: InputMaybe<Scalars['NaiveDate']>;
  seasonNumber: Scalars['Int'];
};

export type ShowSpecifics = {
  seasons: Array<ShowSeason>;
};

export type ShowSpecificsInput = {
  seasons: Array<ShowSeasonSpecificsInput>;
};

export type ShowsSummary = {
  runtime: Scalars['Int'];
  watched: Scalars['Int'];
  watchedEpisodes: Scalars['Int'];
  watchedSeasons: Scalars['Int'];
};

export type UpdateUserInput = {
  email?: InputMaybe<Scalars['String']>;
  password?: InputMaybe<Scalars['String']>;
  username?: InputMaybe<Scalars['String']>;
};

export type UpdateUserPreferencesInput = {
  property: MetadataLot;
  value: Scalars['Boolean'];
};

export type User = {
  email?: Maybe<Scalars['String']>;
  id: Scalars['Int'];
  lot: UserLot;
  name: Scalars['String'];
};

export type UserDetailsError = {
  error: UserDetailsErrorVariant;
};

export enum UserDetailsErrorVariant {
  AuthTokenInvalid = 'AUTH_TOKEN_INVALID'
}

export type UserDetailsResult = User | UserDetailsError;

export type UserInput = {
  password: Scalars['String'];
  username: Scalars['String'];
};

export enum UserLot {
  Admin = 'ADMIN',
  Normal = 'NORMAL'
}

export type UserSummary = {
  anime: AnimeSummary;
  audioBooks: AudioBooksSummary;
  books: BooksSummary;
  manga: MangaSummary;
  movies: MoviesSummary;
  podcasts: PodcastsSummary;
  shows: ShowsSummary;
  videoGames: VideoGamesSummary;
};

export type VideoGameSpecifics = {
  platforms: Array<Scalars['String']>;
};

export type VideoGameSpecificsInput = {
  platforms: Array<Scalars['String']>;
};

export type VideoGamesSummary = {
  played: Scalars['Int'];
};

export type AddMediaToCollectionMutationVariables = Exact<{
  input: AddMediaToCollection;
}>;


export type AddMediaToCollectionMutation = { addMediaToCollection: boolean };

export type CommitMediaMutationVariables = Exact<{
  lot: MetadataLot;
  identifier: Scalars['String'];
}>;


export type CommitMediaMutation = { commitMedia: { id: any } };

export type CommitNext10PodcastEpisodesMutationVariables = Exact<{
  podcastId: Scalars['Identifier'];
}>;


export type CommitNext10PodcastEpisodesMutation = { commitNext10PodcastEpisodes: boolean };

export type CreateCollectionMutationVariables = Exact<{
  input: NamedObjectInput;
}>;


export type CreateCollectionMutation = { createCollection: { id: any } };

export type CreateCustomMediaMutationVariables = Exact<{
  input: CreateCustomMediaInput;
}>;


export type CreateCustomMediaMutation = { createCustomMedia: { __typename: 'CreateCustomMediaError', error: CreateCustomMediaErrorVariant } | { __typename: 'IdObject', id: any } };

export type DeleteCollectionMutationVariables = Exact<{
  collectionName: Scalars['String'];
}>;


export type DeleteCollectionMutation = { deleteCollection: boolean };

export type DeleteReviewMutationVariables = Exact<{
  reviewId: Scalars['Identifier'];
}>;


export type DeleteReviewMutation = { deleteReview: boolean };

export type DeleteSeenItemMutationVariables = Exact<{
  seenId: Scalars['Identifier'];
}>;


export type DeleteSeenItemMutation = { deleteSeenItem: { id: any } };

export type DeployImportMutationVariables = Exact<{
  input: DeployImportInput;
}>;


export type DeployImportMutation = { deployImport: string };

export type DeployUpdateMetadataJobMutationVariables = Exact<{
  metadataId: Scalars['Identifier'];
}>;


export type DeployUpdateMetadataJobMutation = { deployUpdateMetadataJob: string };

export type GenerateApplicationTokenMutationVariables = Exact<{ [key: string]: never; }>;


export type GenerateApplicationTokenMutation = { generateApplicationToken: string };

export type LoginUserMutationVariables = Exact<{
  input: UserInput;
}>;


export type LoginUserMutation = { loginUser: { __typename: 'LoginError', error: LoginErrorVariant } | { __typename: 'LoginResponse', apiKey: string } };

export type LogoutUserMutationVariables = Exact<{ [key: string]: never; }>;


export type LogoutUserMutation = { logoutUser: boolean };

export type MergeMetadataMutationVariables = Exact<{
  mergeFrom: Scalars['Identifier'];
  mergeInto: Scalars['Identifier'];
}>;


export type MergeMetadataMutation = { mergeMetadata: boolean };

export type PostReviewMutationVariables = Exact<{
  input: PostReviewInput;
}>;


export type PostReviewMutation = { postReview: { id: any } };

export type ProgressUpdateMutationVariables = Exact<{
  input: ProgressUpdate;
}>;


export type ProgressUpdateMutation = { progressUpdate: { id: any } };

export type RegenerateUserSummaryMutationVariables = Exact<{ [key: string]: never; }>;


export type RegenerateUserSummaryMutation = { regenerateUserSummary: boolean };

export type RegisterUserMutationVariables = Exact<{
  input: UserInput;
}>;


export type RegisterUserMutation = { registerUser: { __typename: 'IdObject', id: any } | { __typename: 'RegisterError', error: RegisterErrorVariant } };

export type RemoveMediaFromCollectionMutationVariables = Exact<{
  metadataId: Scalars['Identifier'];
  collectionName: Scalars['String'];
}>;


export type RemoveMediaFromCollectionMutation = { removeMediaFromCollection: { id: any } };

export type UpdateAllMetadataMutationVariables = Exact<{ [key: string]: never; }>;


export type UpdateAllMetadataMutation = { updateAllMetadata: boolean };

export type UpdateUserMutationVariables = Exact<{
  input: UpdateUserInput;
}>;


export type UpdateUserMutation = { updateUser: { id: any } };

export type UpdateUserPreferencesMutationVariables = Exact<{
  input: UpdateUserPreferencesInput;
}>;


export type UpdateUserPreferencesMutation = { updateUserPreferences: boolean };

export type CollectionsQueryVariables = Exact<{ [key: string]: never; }>;


export type CollectionsQuery = { collections: Array<{ collectionDetails: { id: number, createdOn: Date, name: string }, mediaDetails: Array<{ identifier: string, lot: MetadataLot, title: string, images: Array<string>, publishYear?: number | null }> }> };

export type CoreDetailsQueryVariables = Exact<{ [key: string]: never; }>;


export type CoreDetailsQuery = { coreDetails: { version: string, authorName: string, repositoryLink: string, usernameChangeAllowed: boolean } };

export type GetPresignedUrlQueryVariables = Exact<{
  key: Scalars['String'];
}>;


export type GetPresignedUrlQuery = { getPresignedUrl: string };

export type MediaDetailsQueryVariables = Exact<{
  metadataId: Scalars['Identifier'];
}>;


export type MediaDetailsQuery = { mediaDetails: { title: string, description?: string | null, identifier: string, lot: MetadataLot, source: MetadataSource, sourceUrl?: string | null, posterImages: Array<string>, backdropImages: Array<string>, publishYear?: number | null, publishDate?: any | null, genres: Array<string>, creators: Array<{ name: string, role: string }>, animeSpecifics?: { episodes?: number | null } | null, bookSpecifics?: { pages?: number | null } | null, movieSpecifics?: { runtime?: number | null } | null, mangaSpecifics?: { volumes?: number | null, chapters?: number | null } | null, podcastSpecifics?: { totalEpisodes: number, episodes: Array<{ title: string, overview?: string | null, thumbnail?: string | null, number: number, runtime?: number | null }> } | null, showSpecifics?: { seasons: Array<{ seasonNumber: number, name: string, overview?: string | null, backdropImages: Array<string>, posterImages: Array<string>, episodes: Array<{ id: number, name: string, posterImages: Array<string>, episodeNumber: number, publishDate?: any | null, overview?: string | null, runtime?: number | null }> }> } | null, videoGameSpecifics?: { platforms: Array<string> } | null } };

export type MediaImportReportsQueryVariables = Exact<{ [key: string]: never; }>;


export type MediaImportReportsQuery = { mediaImportReports: Array<{ id: number, source: MediaImportSource, startedOn: Date, finishedOn?: Date | null, details?: { import: { total: number }, failedItems: Array<{ lot: MetadataLot, step: ImportFailStep, identifier: string }> } | null }> };

export type MediaItemReviewsQueryVariables = Exact<{
  metadataId: Scalars['Identifier'];
}>;


export type MediaItemReviewsQuery = { mediaItemReviews: Array<{ id: any, rating?: any | null, text?: string | null, spoiler: boolean, visibility: ReviewVisibility, seasonNumber?: number | null, episodeNumber?: number | null, postedOn: Date, postedBy: { id: any, name: string } }> };

export type MediaListQueryVariables = Exact<{
  input: MediaListInput;
}>;


export type MediaListQuery = { mediaList: { total: number, nextPage?: number | null, items: Array<{ identifier: string, title: string, images: Array<string>, publishYear?: number | null }> } };

export type MediaSearchQueryVariables = Exact<{
  lot: MetadataLot;
  input: SearchInput;
}>;


export type MediaSearchQuery = { mediaSearch: { total: number, nextPage?: number | null, items: Array<{ databaseId?: any | null, item: { identifier: string, title: string, images: Array<string>, publishYear?: number | null } }> } };

export type SeenHistoryQueryVariables = Exact<{
  metadataId: Scalars['Identifier'];
}>;


export type SeenHistoryQuery = { seenHistory: Array<{ id: number, progress: number, dropped: boolean, startedOn?: any | null, finishedOn?: any | null, lastUpdatedOn: Date, showInformation?: { episode: number, season: number } | null, podcastInformation?: { episode: number } | null }> };

export type UserDetailsQueryVariables = Exact<{ [key: string]: never; }>;


export type UserDetailsQuery = { userDetails: { __typename: 'User', id: number, email?: string | null, name: string, lot: UserLot } | { __typename: 'UserDetailsError' } };

export type UserEnabledFeaturesQueryVariables = Exact<{ [key: string]: never; }>;


export type UserEnabledFeaturesQuery = { userEnabledFeatures: { general: { fileStorage: { enabled: boolean } }, metadata: { anime: boolean, audioBooks: boolean, books: boolean, manga: boolean, movies: boolean, podcasts: boolean, shows: boolean, videoGames: boolean } } };

export type UserSummaryQueryVariables = Exact<{ [key: string]: never; }>;


export type UserSummaryQuery = { userSummary: { manga: { chapters: number, read: number }, books: { pages: number, read: number }, movies: { runtime: number, watched: number }, anime: { episodes: number, watched: number }, podcasts: { runtime: number, played: number, playedEpisodes: number }, videoGames: { played: number }, shows: { runtime: number, watchedEpisodes: number, watchedSeasons: number, watched: number }, audioBooks: { runtime: number, played: number } } };


export const AddMediaToCollectionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"AddMediaToCollection"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"AddMediaToCollection"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"addMediaToCollection"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}]}]}}]} as unknown as DocumentNode<AddMediaToCollectionMutation, AddMediaToCollectionMutationVariables>;
export const CommitMediaDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CommitMedia"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"lot"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"MetadataLot"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"identifier"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commitMedia"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"lot"},"value":{"kind":"Variable","name":{"kind":"Name","value":"lot"}}},{"kind":"Argument","name":{"kind":"Name","value":"identifier"},"value":{"kind":"Variable","name":{"kind":"Name","value":"identifier"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<CommitMediaMutation, CommitMediaMutationVariables>;
export const CommitNext10PodcastEpisodesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CommitNext10PodcastEpisodes"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"podcastId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Identifier"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"commitNext10PodcastEpisodes"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"podcastId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"podcastId"}}}]}]}}]} as unknown as DocumentNode<CommitNext10PodcastEpisodesMutation, CommitNext10PodcastEpisodesMutationVariables>;
export const CreateCollectionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateCollection"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"NamedObjectInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createCollection"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<CreateCollectionMutation, CreateCollectionMutationVariables>;
export const CreateCustomMediaDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateCustomMedia"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateCustomMediaInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createCustomMedia"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"IdObject"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CreateCustomMediaError"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"error"}}]}}]}}]}}]} as unknown as DocumentNode<CreateCustomMediaMutation, CreateCustomMediaMutationVariables>;
export const DeleteCollectionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteCollection"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"collectionName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteCollection"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"collectionName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"collectionName"}}}]}]}}]} as unknown as DocumentNode<DeleteCollectionMutation, DeleteCollectionMutationVariables>;
export const DeleteReviewDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteReview"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"reviewId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Identifier"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteReview"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"reviewId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"reviewId"}}}]}]}}]} as unknown as DocumentNode<DeleteReviewMutation, DeleteReviewMutationVariables>;
export const DeleteSeenItemDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteSeenItem"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"seenId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Identifier"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteSeenItem"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"seenId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"seenId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<DeleteSeenItemMutation, DeleteSeenItemMutationVariables>;
export const DeployImportDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeployImport"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"DeployImportInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deployImport"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}]}]}}]} as unknown as DocumentNode<DeployImportMutation, DeployImportMutationVariables>;
export const DeployUpdateMetadataJobDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeployUpdateMetadataJob"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"metadataId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Identifier"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deployUpdateMetadataJob"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"metadataId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"metadataId"}}}]}]}}]} as unknown as DocumentNode<DeployUpdateMetadataJobMutation, DeployUpdateMetadataJobMutationVariables>;
export const GenerateApplicationTokenDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"GenerateApplicationToken"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"generateApplicationToken"}}]}}]} as unknown as DocumentNode<GenerateApplicationTokenMutation, GenerateApplicationTokenMutationVariables>;
export const LoginUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"LoginUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UserInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"loginUser"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"LoginError"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"error"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"LoginResponse"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"apiKey"}}]}}]}}]}}]} as unknown as DocumentNode<LoginUserMutation, LoginUserMutationVariables>;
export const LogoutUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"LogoutUser"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"logoutUser"}}]}}]} as unknown as DocumentNode<LogoutUserMutation, LogoutUserMutationVariables>;
export const MergeMetadataDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"MergeMetadata"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"mergeFrom"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Identifier"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"mergeInto"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Identifier"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"mergeMetadata"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"mergeFrom"},"value":{"kind":"Variable","name":{"kind":"Name","value":"mergeFrom"}}},{"kind":"Argument","name":{"kind":"Name","value":"mergeInto"},"value":{"kind":"Variable","name":{"kind":"Name","value":"mergeInto"}}}]}]}}]} as unknown as DocumentNode<MergeMetadataMutation, MergeMetadataMutationVariables>;
export const PostReviewDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"PostReview"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"PostReviewInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"postReview"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<PostReviewMutation, PostReviewMutationVariables>;
export const ProgressUpdateDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ProgressUpdate"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ProgressUpdate"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"progressUpdate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<ProgressUpdateMutation, ProgressUpdateMutationVariables>;
export const RegenerateUserSummaryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"RegenerateUserSummary"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"regenerateUserSummary"}}]}}]} as unknown as DocumentNode<RegenerateUserSummaryMutation, RegenerateUserSummaryMutationVariables>;
export const RegisterUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"RegisterUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UserInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"registerUser"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"RegisterError"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"error"}}]}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"IdObject"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode<RegisterUserMutation, RegisterUserMutationVariables>;
export const RemoveMediaFromCollectionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"RemoveMediaFromCollection"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"metadataId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Identifier"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"collectionName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"removeMediaFromCollection"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"metadataId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"metadataId"}}},{"kind":"Argument","name":{"kind":"Name","value":"collectionName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"collectionName"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<RemoveMediaFromCollectionMutation, RemoveMediaFromCollectionMutationVariables>;
export const UpdateAllMetadataDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateAllMetadata"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateAllMetadata"}}]}}]} as unknown as DocumentNode<UpdateAllMetadataMutation, UpdateAllMetadataMutationVariables>;
export const UpdateUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UpdateUserInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateUser"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<UpdateUserMutation, UpdateUserMutationVariables>;
export const UpdateUserPreferencesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateUserPreferences"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UpdateUserPreferencesInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateUserPreferences"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}]}]}}]} as unknown as DocumentNode<UpdateUserPreferencesMutation, UpdateUserPreferencesMutationVariables>;
export const CollectionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Collections"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"collections"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"collectionDetails"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"createdOn"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"mediaDetails"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"identifier"}},{"kind":"Field","name":{"kind":"Name","value":"lot"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"images"}},{"kind":"Field","name":{"kind":"Name","value":"publishYear"}}]}}]}}]}}]} as unknown as DocumentNode<CollectionsQuery, CollectionsQueryVariables>;
export const CoreDetailsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CoreDetails"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"coreDetails"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"authorName"}},{"kind":"Field","name":{"kind":"Name","value":"repositoryLink"}},{"kind":"Field","name":{"kind":"Name","value":"usernameChangeAllowed"}}]}}]}}]} as unknown as DocumentNode<CoreDetailsQuery, CoreDetailsQueryVariables>;
export const GetPresignedUrlDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetPresignedUrl"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"key"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getPresignedUrl"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"key"},"value":{"kind":"Variable","name":{"kind":"Name","value":"key"}}}]}]}}]} as unknown as DocumentNode<GetPresignedUrlQuery, GetPresignedUrlQueryVariables>;
export const MediaDetailsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"MediaDetails"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"metadataId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Identifier"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"mediaDetails"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"metadataId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"metadataId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"identifier"}},{"kind":"Field","name":{"kind":"Name","value":"lot"}},{"kind":"Field","name":{"kind":"Name","value":"source"}},{"kind":"Field","name":{"kind":"Name","value":"sourceUrl"}},{"kind":"Field","name":{"kind":"Name","value":"creators"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"role"}}]}},{"kind":"Field","name":{"kind":"Name","value":"posterImages"}},{"kind":"Field","name":{"kind":"Name","value":"backdropImages"}},{"kind":"Field","name":{"kind":"Name","value":"publishYear"}},{"kind":"Field","name":{"kind":"Name","value":"publishDate"}},{"kind":"Field","name":{"kind":"Name","value":"genres"}},{"kind":"Field","name":{"kind":"Name","value":"animeSpecifics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"episodes"}}]}},{"kind":"Field","name":{"kind":"Name","value":"bookSpecifics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"pages"}}]}},{"kind":"Field","name":{"kind":"Name","value":"movieSpecifics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"runtime"}}]}},{"kind":"Field","name":{"kind":"Name","value":"mangaSpecifics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"volumes"}},{"kind":"Field","name":{"kind":"Name","value":"chapters"}}]}},{"kind":"Field","name":{"kind":"Name","value":"podcastSpecifics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"episodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"overview"}},{"kind":"Field","name":{"kind":"Name","value":"thumbnail"}},{"kind":"Field","name":{"kind":"Name","value":"number"}},{"kind":"Field","name":{"kind":"Name","value":"runtime"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalEpisodes"}}]}},{"kind":"Field","name":{"kind":"Name","value":"showSpecifics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"seasons"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"seasonNumber"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"overview"}},{"kind":"Field","name":{"kind":"Name","value":"backdropImages"}},{"kind":"Field","name":{"kind":"Name","value":"posterImages"}},{"kind":"Field","name":{"kind":"Name","value":"episodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"posterImages"}},{"kind":"Field","name":{"kind":"Name","value":"episodeNumber"}},{"kind":"Field","name":{"kind":"Name","value":"publishDate"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"overview"}},{"kind":"Field","name":{"kind":"Name","value":"runtime"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"videoGameSpecifics"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"platforms"}}]}}]}}]}}]} as unknown as DocumentNode<MediaDetailsQuery, MediaDetailsQueryVariables>;
export const MediaImportReportsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"MediaImportReports"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"mediaImportReports"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"source"}},{"kind":"Field","name":{"kind":"Name","value":"startedOn"}},{"kind":"Field","name":{"kind":"Name","value":"finishedOn"}},{"kind":"Field","name":{"kind":"Name","value":"details"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"import"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"total"}}]}},{"kind":"Field","name":{"kind":"Name","value":"failedItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"lot"}},{"kind":"Field","name":{"kind":"Name","value":"step"}},{"kind":"Field","name":{"kind":"Name","value":"identifier"}}]}}]}}]}}]}}]} as unknown as DocumentNode<MediaImportReportsQuery, MediaImportReportsQueryVariables>;
export const MediaItemReviewsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"MediaItemReviews"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"metadataId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Identifier"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"mediaItemReviews"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"metadataId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"metadataId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"rating"}},{"kind":"Field","name":{"kind":"Name","value":"text"}},{"kind":"Field","name":{"kind":"Name","value":"spoiler"}},{"kind":"Field","name":{"kind":"Name","value":"visibility"}},{"kind":"Field","name":{"kind":"Name","value":"seasonNumber"}},{"kind":"Field","name":{"kind":"Name","value":"episodeNumber"}},{"kind":"Field","name":{"kind":"Name","value":"postedOn"}},{"kind":"Field","name":{"kind":"Name","value":"postedBy"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode<MediaItemReviewsQuery, MediaItemReviewsQueryVariables>;
export const MediaListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"MediaList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"MediaListInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"mediaList"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"total"}},{"kind":"Field","name":{"kind":"Name","value":"nextPage"}},{"kind":"Field","name":{"kind":"Name","value":"items"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"identifier"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"images"}},{"kind":"Field","name":{"kind":"Name","value":"publishYear"}}]}}]}}]}}]} as unknown as DocumentNode<MediaListQuery, MediaListQueryVariables>;
export const MediaSearchDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"MediaSearch"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"lot"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"MetadataLot"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"SearchInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"mediaSearch"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"lot"},"value":{"kind":"Variable","name":{"kind":"Name","value":"lot"}}},{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"total"}},{"kind":"Field","name":{"kind":"Name","value":"nextPage"}},{"kind":"Field","name":{"kind":"Name","value":"items"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"databaseId"}},{"kind":"Field","name":{"kind":"Name","value":"item"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"identifier"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"images"}},{"kind":"Field","name":{"kind":"Name","value":"publishYear"}}]}}]}}]}}]}}]} as unknown as DocumentNode<MediaSearchQuery, MediaSearchQueryVariables>;
export const SeenHistoryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SeenHistory"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"metadataId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Identifier"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"seenHistory"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"metadataId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"metadataId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"progress"}},{"kind":"Field","name":{"kind":"Name","value":"dropped"}},{"kind":"Field","name":{"kind":"Name","value":"startedOn"}},{"kind":"Field","name":{"kind":"Name","value":"finishedOn"}},{"kind":"Field","name":{"kind":"Name","value":"lastUpdatedOn"}},{"kind":"Field","name":{"kind":"Name","value":"showInformation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"episode"}},{"kind":"Field","name":{"kind":"Name","value":"season"}}]}},{"kind":"Field","name":{"kind":"Name","value":"podcastInformation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"episode"}}]}}]}}]}}]} as unknown as DocumentNode<SeenHistoryQuery, SeenHistoryQueryVariables>;
export const UserDetailsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"UserDetails"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userDetails"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"__typename"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"lot"}}]}}]}}]}}]} as unknown as DocumentNode<UserDetailsQuery, UserDetailsQueryVariables>;
export const UserEnabledFeaturesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"UserEnabledFeatures"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userEnabledFeatures"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"general"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileStorage"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"enabled"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"metadata"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"anime"}},{"kind":"Field","name":{"kind":"Name","value":"audioBooks"}},{"kind":"Field","name":{"kind":"Name","value":"books"}},{"kind":"Field","name":{"kind":"Name","value":"manga"}},{"kind":"Field","name":{"kind":"Name","value":"movies"}},{"kind":"Field","name":{"kind":"Name","value":"podcasts"}},{"kind":"Field","name":{"kind":"Name","value":"shows"}},{"kind":"Field","name":{"kind":"Name","value":"videoGames"}}]}}]}}]}}]} as unknown as DocumentNode<UserEnabledFeaturesQuery, UserEnabledFeaturesQueryVariables>;
export const UserSummaryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"UserSummary"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userSummary"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"manga"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"chapters"}},{"kind":"Field","name":{"kind":"Name","value":"read"}}]}},{"kind":"Field","name":{"kind":"Name","value":"books"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"pages"}},{"kind":"Field","name":{"kind":"Name","value":"read"}}]}},{"kind":"Field","name":{"kind":"Name","value":"movies"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"runtime"}},{"kind":"Field","name":{"kind":"Name","value":"watched"}}]}},{"kind":"Field","name":{"kind":"Name","value":"anime"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"episodes"}},{"kind":"Field","name":{"kind":"Name","value":"watched"}}]}},{"kind":"Field","name":{"kind":"Name","value":"podcasts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"runtime"}},{"kind":"Field","name":{"kind":"Name","value":"played"}},{"kind":"Field","name":{"kind":"Name","value":"playedEpisodes"}}]}},{"kind":"Field","name":{"kind":"Name","value":"videoGames"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"played"}}]}},{"kind":"Field","name":{"kind":"Name","value":"shows"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"runtime"}},{"kind":"Field","name":{"kind":"Name","value":"watchedEpisodes"}},{"kind":"Field","name":{"kind":"Name","value":"watchedSeasons"}},{"kind":"Field","name":{"kind":"Name","value":"watched"}}]}},{"kind":"Field","name":{"kind":"Name","value":"audioBooks"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"runtime"}},{"kind":"Field","name":{"kind":"Name","value":"played"}}]}}]}}]}}]} as unknown as DocumentNode<UserSummaryQuery, UserSummaryQueryVariables>;