// Automatically generated by schematic. DO NOT MODIFY!

/* eslint-disable */

export interface AnimeAnilistConfig {

}

export interface AnimeConfig {
	// Settings related to Anilist (anime).
	anilist: AnimeAnilistConfig;
}

export interface AudibleConfig {
	// Settings related to locale for making requests Audible.
	locale: string;
}

export interface AudioBookConfig {
	// Settings related to Audible.
	audible: AudibleConfig;
}

export interface GoogleBooksConfig {

}

export type OpenlibraryCoverImageSize = 'S' | 'M' | 'L';

export interface OpenlibraryConfig {
	// The image sizes to fetch from Openlibrary.
	cover_image_size: OpenlibraryCoverImageSize;
}

export interface BookConfig {
	// Settings related to Google Books.
	googleBooks: GoogleBooksConfig;
	// Settings related to Openlibrary.
	openlibrary: OpenlibraryConfig;
}

export interface DatabaseConfig {
	// The path where [SCDB](https://docs.rs/scdb) will persist its storage.
	scdb_url: string;
	// The database connection string. Supports SQLite, MySQL and Postgres.
	url: string;
}

export interface FreeExerciseDbConfig {
	// The base URL to prefix for all images.
	images_prefix_url: string;
	// The URL for the raw JSON for all exercises.
	json_url: string;
}

export interface ExerciseConfig {
	db: FreeExerciseDbConfig;
}

export interface FileStorageConfig {
	// The access key ID for the S3 compatible file storage. **Required** to
	s_3_access_key_id: string;
	// The name of the S3 compatible bucket. **Required** to enable file storage.
	s_3_bucket_name: string;
	// The region for the S3 compatible file storage.
	s_3_region: string;
	// The secret access key for the S3 compatible file storage. **Required**
	s_3_secret_access_key: string;
	// The URL for the S3 compatible file storage.
	s_3_url: string;
}

export interface IntegrationConfig {
	// Sync data from [yank](/docs/guides/integrations.md) based integrations
	pull_every: number;
}

export interface MangaAnilistConfig {

}

export interface MangaConfig {
	// Settings related to Anilist (manga).
	anilist: MangaAnilistConfig;
}

export interface MediaConfig {
	// Whether to sort images by their resolution. This will result in better
	sort_images: boolean;
}

export interface MoviesTmdbConfig {
	// The access token for the TMDB API.
	access_token: string;
	// The locale to use for making requests to TMDB API.
	locale: string;
}

export interface MovieConfig {
	// Settings related to TMDB (movies).
	tmdb: MoviesTmdbConfig;
}

export interface ITunesConfig {
	// The locale to use for making requests to iTunes API.
	locale: string;
}

export interface ListenNotesConfig {
	// The access token for the Listennotes API.
	api_token: string;
}

export interface PodcastConfig {
	// Settings related to iTunes.
	itunes: ITunesConfig;
	// Settings related to Listennotes.
	listennotes: ListenNotesConfig;
}

export interface SchedulerConfig {
	// The url to the SQLite database where job related data needs to be stored.
	database_url: string;
	// The number of jobs to process every 5 seconds when updating metadata in
	rate_limit_num: number;
	// Deploy a job every x hours that performs user cleanup and summary
	user_cleanup_every: number;
}

export interface ShowsTmdbConfig {
	// The access token for the TMDB API.
	access_token: string;
	// The locale to use for making requests to TMDB API.
	locale: string;
}

export interface ShowConfig {
	// Settings related to TMDB (shows).
	tmdb: ShowsTmdbConfig;
}

export interface UsersConfig {
	// Whether users will be allowed to change their username in their profile
	allow_changing_username: boolean;
	// Whether new users will be allowed to sign up to this instance.
	allow_registration: boolean;
	// The number of days till login auth token is valid.
	token_valid_for_days: number;
}

export type IgdbImageSize = 't_original';

export interface IgdbConfig {
	// The image sizes to fetch from IGDB.
	image_size: IgdbImageSize;
}

export interface TwitchConfig {
	// The client ID issues by Twitch. **Required** to enable video games
	client_id: string;
	// The client secret issued by Twitch. **Required** to enable video games
	client_secret: string;
}

export interface VideoGameConfig {
	// Settings related to IGDB.
	igdb: IgdbConfig;
	// Settings related to Twitch.
	twitch: TwitchConfig;
}

export interface WebConfig {
	// An array of URLs for CORS.
	cors_origins: string[];
	// This will make auth cookies insecure and should be set to `true` if you
	insecure_cookie: boolean;
}

export interface AppConfig {
	// Settings related to anime.
	anime: AnimeConfig;
	// Settings related to audio books.
	audio_books: AudioBookConfig;
	// Settings related to books.
	books: BookConfig;
	// The database related settings.
	database: DatabaseConfig;
	// Settings related to exercises.
	exercise: ExerciseConfig;
	// Settings related to file storage.
	file_storage: FileStorageConfig;
	// Settings related to external integrations.
	integration: IntegrationConfig;
	// Settings related to manga.
	manga: MangaConfig;
	// Settings related to media.
	media: MediaConfig;
	// Settings related to movies.
	movies: MovieConfig;
	// Settings related to podcasts.
	podcasts: PodcastConfig;
	// Settings related to scheduler.
	scheduler: SchedulerConfig;
	// Settings related to shows.
	shows: ShowConfig;
	// Settings related to users.
	users: UsersConfig;
	// Settings related to video games.
	video_games: VideoGameConfig;
	// Settings related to website.
	web: WebConfig;
}
